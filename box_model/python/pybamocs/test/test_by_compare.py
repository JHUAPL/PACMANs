# Copyright 2022, The Johns Hopkins University Applied Physics Laboratory LLC
# All rights reserved.
# Distributed under the terms of the BSD 3-Clause License.

import numpy as np
import os

from pybamocs.box_model_args import (
    BoxModelBoxDimensions,
    BoxModelInitConditions,
    BoxModelParameters,
    BoxModelTimeStep,
)
from pybamocs.box_model import box_model
from numpy import genfromtxt

PATH_TO_DATA = os.path.join(os.path.dirname(os.path.realpath(__file__)), "data")


def test_comp_box_model_w_matlab() -> None:
    """
    Compare the output of the box model with the same run using the Matlab code and ensure the differences are small.
    """
    mat_M_n = genfromtxt(os.path.join(PATH_TO_DATA, 'M_n.csv'), delimiter=',')
    mat_M_upw = genfromtxt(os.path.join(PATH_TO_DATA, 'M_u.csv'), delimiter=',')
    mat_M_eddy = genfromtxt(os.path.join(PATH_TO_DATA, 'M_eddy.csv'), delimiter=',')
    mat_D_low = genfromtxt(os.path.join(PATH_TO_DATA, 'Dlow.csv'), delimiter=',')[:-1]
    mat_T = genfromtxt(os.path.join(PATH_TO_DATA, 'T.csv'), delimiter=',')[:-1].T
    mat_S = genfromtxt(os.path.join(PATH_TO_DATA, 'S.csv'), delimiter=',')[:-1].T
    mat_sigma0 = genfromtxt(os.path.join(PATH_TO_DATA, 'sigma0.csv'), delimiter=',').T

    box_dims = BoxModelBoxDimensions()
    box_init = BoxModelInitConditions()
    box_params = BoxModelParameters(M_ek=15e6)
    box_time_step = BoxModelTimeStep()

    out = box_model(box_dims, box_init, box_params, box_time_step)
    M_n, M_upw, M_eddy, D_low, T, S, sigma0 = out.M_n, out.M_upw, out.M_eddy, out.D_low, out.T, out.S, out.sigma_0

    T_error = T - mat_T
    S_error = S - mat_S
    sigma0_error = sigma0 - mat_sigma0

    # assert errors between individual values are small
    assert (np.abs(M_n - mat_M_n) < 1e-7).all()  # largest accumulated error
    assert (np.abs(M_upw - mat_M_upw) < 1e-8).all()
    assert (np.abs(M_eddy - mat_M_eddy) < 1e-8).all()
    assert (np.abs(D_low - mat_D_low) < 1e-8).all()
    assert (np.abs(T_error) < 1e-10).all()
    assert (np.abs(S_error) < 1e-10).all()
    assert (np.abs(sigma0_error) < 1e-10).all()

    # Assert sums of errors are also small
    assert np.abs(M_n - mat_M_n).sum() < 2e-4  # largest accumulated error
    assert np.abs(M_upw - mat_M_upw).sum() < 2e-5
    assert np.abs(M_eddy - mat_M_eddy).sum() < 1e-5
    assert np.abs(D_low - mat_D_low).sum() < 1e-9
    assert np.abs(T_error).sum() < 1e-9
    assert np.abs(S_error).sum() < 1e-9
    assert np.abs(sigma0_error).sum() < 1e-7


def test_comp_with_self() -> None:
    """
    Compare produced values with values generated by box model at earlier time
    """
    old_data = np.load(os.path.join(PATH_TO_DATA, 'test.npz'))

    box_dims = BoxModelBoxDimensions()
    box_init = BoxModelInitConditions()
    box_params = BoxModelParameters()
    box_time_step = BoxModelTimeStep()

    out = box_model(box_dims, box_init, box_params, box_time_step)
    M_n, M_upw, M_eddy, D_low, T, S, sigma0 = out.M_n, out.M_upw, out.M_eddy, out.D_low, out.T, out.S, out.sigma_0
    assert np.array_equal(M_n, old_data['M_n'])
    assert np.array_equal(M_upw, old_data['M_upw'])
    assert np.array_equal(M_eddy, old_data['M_eddy'])
    assert np.array_equal(D_low, old_data['D_low'])
    assert np.array_equal(T, old_data['T'])
    assert np.array_equal(S, old_data['S'])
    assert np.array_equal(sigma0, old_data['sigma0'])


if __name__ == "__main__":
    test_comp_box_model_w_matlab()
    test_comp_with_self()
